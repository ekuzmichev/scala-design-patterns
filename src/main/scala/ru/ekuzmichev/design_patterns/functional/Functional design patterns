------------------------------------------------------------------------------------------------------------------------
Monoids

A monoid is a purely algebraic structure, which means that it is defined only by its algebra.
All monoids must conform to the so-called monoid laws.

Algebraic: It is defined only by its algebra, for example, the operations it supports and the laws it conforms to.

A monoid is a type with an associative binary operation over it, which also has an identity element.

Monoid laws:

- A monoid contains a T type.
- A monoid contains one associative binary operation.
    This means that for any x, y, and z of the T type, the following is true:
    op(op(x, y), z) == op(x, op(y, z)).
- A structure must have an identity element—zero.
    This element is characterized by the fact that the previous operation
    will always return the other element
    op(x, zero) == x and op(zero, x) == x.

With the use of monoids, we can easily facilitate parallel computation and build complex calculations from small pieces.

The fact that a monoid operation is associative means that if we have to chain multiple operations,
we could probably do it in parallel.

For example, if we have the numbers 1, 2, 3, and 4 and wanted to find 4!, we can do the following:

op(op(op(1, 2), 3), 4)

The associativity, however, would allow us to do the following:

op(op(1, 2), op(3, 4))

This is also called balanced fold

Monoids support composition; if A and B are monoids, then their product (A, B) is also a monoid.

The purpose of monoids is to actually allow us to write generic and reusable code.
With the help of monoids, we can focus on simple operations and then just compose
them together rather than build concrete implementations for everything we want.

------------------------------------------------------------------------------------------------------------------------
Functors

The map method for a functor of the F[T] type takes a function from T to Y as a parameter and returns a F[Y] as a result.

Functors also obey some functor laws:

- Identity: Whenever the identity function is mapped over some data, it doesn't change it, in other words,
    map(x)(i => i) == x.
- Composition: Multiple maps must compose together. It should make no difference if we do this operation:
    map(map(x)(i => y(i)))(i => z(i)) or map(x)(i => z(y(i))).
- The map function preserves the structure of the data, for example,
    it does not add or remove elements, change their order, and so on. It just changes the representation.

------------------------------------------------------------------------------------------------------------------------
Monads

Monads are functors that have the unit and flatMap methods and follow the monad rules.

Monad laws:

- Identity law:
    Doing map over the identity function doesn't change the data
        map(x)(i => i) == x.
    Flat mapping over the unit function also keeps the data the same
        x.flatMap(i => unit(i)) == x.
    The latter basically says that flatMap undoes unit.
    Using the connection between map, flatMap, and unit we defined earlier,
    we can derive one of these two rules from the other and vice versa.
    The unit method can be thought of as the zero element in monoids.
- The unit law:
    From the definition of unit, we can also say this:
        unit(x).flatMap { y => f(y) } == f(x).
    From this, we will get
        unit(x).map { y => f(x) } == unit(f(x)).
    This gives us some interesting connections between all the methods.
- Composition:
    Multiple maps must be composed together.
    It should make no difference if we do
        x.map(i => y(i)).map(i => z(i)) or x.map(i => z(y(i))).
    Moreover, multiple flatMap calls must also compose, making the following true:
        x.flatMap(i => y(i)).flatMap(i => z(i)) == x.flatMap(i => y(i).flatMap(j => z(j))).

Zero Monad laws:

- Zero identity:
    It says that no matter what function we apply to a zero monad,
    it is still going to be
        zero—zero.flatMap(i => f(i)) == zero and zero.map(i => f(i)) == zero.
    Zero shouldn't be confused with unit, as they are different and the latter doesn't represent emptiness.
- Reverse zero:
    Basically, if we replace everything with zero,
    our final result will also be zero
        x.flatMap(i => zero) == zero.
- Commutativity :
    Monads can have a concept of addition, whether it is concatenation or something else.
    In any case, this kind of operation when done with the zero monad will be commutative,
    for example,
        x plus zero == zero plus x == x.