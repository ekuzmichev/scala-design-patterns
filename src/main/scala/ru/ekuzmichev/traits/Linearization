We will not have to deal with linearization in traits that contain no code.
However, if we use mixins, we will have to consider it.

The following will be affected by linearization:

- Method definitions
- Variables (both mutable‚Äîvar and immutable‚Äîval)

üìçRules of inheritance hierarchies

Before looking into linearization rules, we need to be clear on some inheritance rules in Scala:

In Java, even if a class does not explicitly extend another one, its superclass will be java.lang.Object.
The same stands for Scala, and the equivalent base is AnyRef.

There is a similarity between directly extending a trait and extending the trait superclass
and mixing the trait in using the with keyword.

We can always get to a canonical form for all traits and classes, where the base class is specified
using extends and then all traits are added using the with keyword.

üìçLinearization rules:

- The linearization of any class must include the unmodified linearization
    of any class (but not trait) that it extends.
- The linearization of any class must include all the classes and mixin traits
    in the linearization of any trait it extends, but the mixin traits are not bound to appear
    in the same order as they appear in the linearization of the traits being mixed in.
- Each class or trait in the linearization can appear only once. Duplicates are ignored.
- It is not possible to mix in traits that have different base classes or to mix in
    a trait into a class when their base classes differ.

üìçHow linearization works

In Scala, linearizations are listed from left to right where the right-most class is the most general,
    for example, AnyRef. While doing linearization, Any is also added to the hierarchy list.
This, combined with the rule that any class must include the linearization of its superclass,
    means that the superclass linearization will appear as a suffix of the class linearization.

An example with some really simple classes:

class Animal extends AnyRef
class Dog extends Animal

The linearization of these two classes will be, respectively:

Animal -> AnyRef -> Any
Dog -> Animal -> AnyRef -> Any

üìçAlgorithm that describes how a linearization is calculated:

- Start with the following class declaration‚Äîclass A extends B with T1 with T2.
- Reverse the order of the list except the first item and drop the keywords.
    This way, the superclass will come as a suffix‚ÄîA T2 T1 B.
- Each item gets replaced with its linearization‚ÄîA T2L T1L BL.
- Concatenate the list elements using the right-associative concatenation operation: A +: T2L +: T1L +: BL.
- Append the standard AnyRef and Any classes‚ÄîA +: T2L +: T1L +: BL +: AnyRef +: Any.
- Evaluate the preceding expression. Due to the right-associative concatenation,
    we start from the right and move to the left. In each step, we remove any element
    that has already appeared on the right-hand side. In our case, when we get to BL,
    we will not add AnyRef and Any that it also contains; we will just add BL and then we will continue.
    At T1L, we will skip the step to add anything that was added before and so on, until we reach A.
- In the end, after the linearization finishes, we will have a list of classes and traits without duplicates.

üìçInitialization

The rule is that the constructor code is executed in a reverse order compared to the linearization order.
This means that, going from right to left, first the Any and AnyRef constructors will be invoked
    and then the actual class constructor will be called.
Also, the superclass constructor will be called before the actual class or any of its mixins because,
    as we have already mentioned previously, it is added as a suffix.

Keeping in mind that we traverse the linearization from right to left also means that after
    the superclass constructor is called, the mixin trait constructors will be called.
Here, they will be called in the order in which they appear in the original class definition
    (because of the right to left direction and the fact that their order is reversed when the linearization is created).